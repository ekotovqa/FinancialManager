@inject IOperationTypeService _operationTypeService

<div class="modal fade show" id="modalDelet" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add New Category</h4>
                <button type="button" class="btn-close" @onclick="ModalCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@_newOperationType" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="mb-3">
                        <label for="nameInput" class="form-label">Name</label>
                        <InputText class="form-control" id="nameInput" @bind-Value="_newOperationType.Name"/>
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary btn-sm">Add</button>
                    </div>
                </EditForm>                 
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public bool IsIncomeTypeOperation { get; set; }

    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    private OperationTypeViewModel _newOperationType = new OperationTypeViewModel();

    public async Task HandleValidSubmit()
    {
        _newOperationType.IsIncome = IsIncomeTypeOperation;
        await _operationTypeService.PostAsync("OperationTypes", _newOperationType);
        await OnSubmitCallback.InvokeAsync();
    }

    private async Task ModalCancel()
    {
        await OnClose.InvokeAsync(false);
    }
}
