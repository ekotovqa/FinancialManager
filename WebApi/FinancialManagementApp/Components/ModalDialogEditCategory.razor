@inject IOperationTypeService _operationTypeService

<div class="modal fade show" id="modalDelet" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Edit Category: @OperationType.Name</h4>
                <button type="button" class="btn-close" @onclick="ModalCancel"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@OperationType" OnValidSubmit="@HandleValidSave">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>
                    <div class="mb-3">
                        <label for="nameInput" class="form-label">Name</label>
                        <InputText class="form-control" id="nameInput" @bind-Value="OperationType.Name"/>
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary btn-sm">Save</button>
                        <button type="button" class="btn btn-danger btn-sm" disabled="@_buttonDeletDisabled" @onclick="() => OpenDeletDialog(OperationType)">Delete</button>
                    </div>
                </EditForm>                 
            </div>
        </div>
    </div>
</div>
@if(DeletCategoryOpen)
{
    <ModalDialogDelet EntityNameToDelet=@_operationTypeToDelet.Name OnClose="OnDeletCategoryClose"></ModalDialogDelet>
}

@code {

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public bool IsEarningOperation { get; set; }

    [Parameter]
    public EventCallback ActionCallback { get; set; }

    [Parameter]
    public OperationTypeViewModel OperationType { get; set; }

    public bool DeletCategoryOpen { get; set; }

    private OperationTypeViewModel _operationTypeToDelet;

    private IEnumerable<OperationViewModel> _operations;

    private bool _buttonDeletDisabled => _operations.Count() == 0 ? false : true;

    public async Task HandleValidSave()
    {
        await _operationTypeService.PutAsync("OperationTypes", OperationType);
        await ActionCallback.InvokeAsync();
    }

    private void OpenDeletDialog(OperationTypeViewModel operationType)
    {
        _operationTypeToDelet = operationType;
        DeletCategoryOpen = true;
        StateHasChanged();
    }

    private async Task OnDeletCategoryClose(bool accepted)
    {
        if (accepted)
        {
            await _operationTypeService.DeleteAsync("OperationTypes", _operationTypeToDelet);
            _operationTypeToDelet = null;
            await ModalCancel();
            await ActionCallback.InvokeAsync();
        }
        DeletCategoryOpen = false;
        StateHasChanged();
    }

    private async Task ModalCancel()
    {
        await OnClose.InvokeAsync(false);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        parameters.SetParameterProperties(this);
        _operations = await _operationTypeService.GetOperations($"OperationTypes/{OperationType.Id}/Operations");
        await base.SetParametersAsync(ParameterView.Empty);
    }
}
